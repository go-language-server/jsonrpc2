version: 2.1

orbs:
  golang: cci-orb/golang@volatile
  codecov: codecov/codecov@1.1.3

commands:
  parse_goflags:
    steps:
      - run:
          name: "Parse CPUs"
          command: |
            CPUS="$(make env/JOBS)"
            echo "export GOFLAGS='-p=${CPUS} -cpu=${CPUS}'" >> $BASH_ENV

jobs:
  test:
    parameters:
      go-version:
        type: string
    executor:
      name: golang/linux
      version: "<< parameters.go-version >>"
    working_directory: /go/src/go.lsp.dev/jsonrpc2
    resource_class: large
    steps:
      - checkout
      - run:
          name: Check versions
          command: |
            go version
            go env
      - restore_cache:
          name: Restore Go modules cache
          key: 'gomod-<< parameters.go-version >>-{{ checksum "go.mod" }}-{{ checksum "go.sum" }}'
      - run:
          name: Download Go module dependencies
          command: |
            go mod download
      - save_cache:
          name: Save Go modules cache
          key: 'gomod-<< parameters.go-version >>-{{ checksum "go.mod" }}-{{ checksum "go.sum" }}'
          paths:
            - /go/pkg/mod/cache
      - run:
          name: Run go mod vendor
          command: |
            go mod vendor
      - parse_goflags
      - run:
          name: Test and collect coverages
          environment:
            # https://github.com/gotestyourself/gotestsum#format
            GOTESTSUM_FORMAT: standard-verbose
            # https://github.com/gotestyourself/gotestsum#junit-xml
            GOTESTSUM_JUNITFILE: /tmp/test-results/tests.xml
            # https://github.com/gotestyourself/gotestsum#finding-and-skipping-slow-tests
            GOTESTSUM_JSONFILE: /tmp/test-results/tests.json
          command: |
            mkdir -p /tmp/test-results
            make coverage
      - codecov/upload:
          file: "coverage.out"
      - store_test_results:
          path: /tmp/test-results
      - store_artifacts:
          path: /tmp/test-results

  lint:
    parameters:
      go-version:
        type: string
    executor:
      name: golang/linux
      version: "<< parameters.go-version >>"
    working_directory: /go/src/go.lsp.dev/jsonrpc2
    resource_class: large
    steps:
      - checkout
      - golang/gomod
      - run:
          name: Check versions
          command: |
            go version
            go env
      - run:
          name: Run fmt and lint for sources
          command: |
            make lint
            git add -N . && git diff --exit-code

workflows:
  version: 2
  workflows:
    jobs:
      - test:
          context: org-global
          matrix:
            parameters:
              go-version: ["1.15-buster", "1.16-rc-buster"]

      - lint:
          context: org-global
          matrix:
            parameters:
              go-version: ["1.15-buster"]
