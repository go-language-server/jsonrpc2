// Copyright 2019 The go-language-server Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by GoJay. DO NOT EDIT.

package jsonrpc2

import (
	"github.com/francoispqt/gojay"
)

// UnmarshalJSONObject implements gojay's UnmarshalerJSONObject
func (v *ID) UnmarshalJSONObject(dec *gojay.Decoder, k string) error {
	switch k {
	case "name":
		return dec.String(&v.Name)
	case "number":
		return dec.Int64(&v.Number)
	}
	return nil
}

// NKeys returns the number of keys to unmarshal
func (v *ID) NKeys() int { return 2 }

// MarshalJSONObject implements gojay's MarshalerJSONObject
func (v *ID) MarshalJSONObject(enc *gojay.Encoder) {
	enc.StringKey("name", v.Name)
	enc.Int64Key("number", v.Number)
}

// IsNil returns wether the structure is nil value or not
func (v *ID) IsNil() bool { return v == nil }

// UnmarshalJSONObject implements gojay's UnmarshalerJSONObject
func (v *Message) UnmarshalJSONObject(dec *gojay.Decoder, k string) error {
	switch k {
	case "jsonrpc":
		return dec.String(&v.JSONRPC)
	}
	return nil
}

// NKeys returns the number of keys to unmarshal
func (v *Message) NKeys() int { return 1 }

// MarshalJSONObject implements gojay's MarshalerJSONObject
func (v *Message) MarshalJSONObject(enc *gojay.Encoder) {
	enc.StringKey("jsonrpc", v.JSONRPC)
}

// IsNil returns wether the structure is nil value or not
func (v *Message) IsNil() bool { return v == nil }

// UnmarshalJSONObject implements gojay's UnmarshalerJSONObject
func (v *Request) UnmarshalJSONObject(dec *gojay.Decoder, k string) error {
	switch k {
	case "jsonrpc":
		return dec.String(&v.JSONRPC)
	case "id":
		if v.ID == nil {
			v.ID = &ID{}
		}
		return dec.Object(v.ID)
	case "method":
		return dec.String(&v.Method)
	}
	return nil
}

// NKeys returns the number of keys to unmarshal
func (v *Request) NKeys() int { return 3 }

// MarshalJSONObject implements gojay's MarshalerJSONObject
func (v *Request) MarshalJSONObject(enc *gojay.Encoder) {
	enc.StringKey("jsonrpc", v.JSONRPC)
	enc.ObjectKey("id", v.ID)
	enc.StringKey("method", v.Method)
}

// IsNil returns wether the structure is nil value or not
func (v *Request) IsNil() bool { return v == nil }

// UnmarshalJSONObject implements gojay's UnmarshalerJSONObject
func (v *Response) UnmarshalJSONObject(dec *gojay.Decoder, k string) error {
	switch k {
	case "jsonrpc":
		return dec.String(&v.JSONRPC)
	case "error":
		if v.Error == nil {
			v.Error = &ResponseError{}
		}
		return dec.Object(v.Error)
	case "id":
		if v.ID == nil {
			v.ID = &ID{}
		}
		return dec.Object(v.ID)
	}
	return nil
}

// NKeys returns the number of keys to unmarshal
func (v *Response) NKeys() int { return 3 }

// MarshalJSONObject implements gojay's MarshalerJSONObject
func (v *Response) MarshalJSONObject(enc *gojay.Encoder) {
	enc.StringKey("jsonrpc", v.JSONRPC)
	enc.ObjectKey("error", v.Error)
	enc.ObjectKey("id", v.ID)
}

// IsNil returns wether the structure is nil value or not
func (v *Response) IsNil() bool { return v == nil }

// UnmarshalJSONObject implements gojay's UnmarshalerJSONObject
func (v *ResponseError) UnmarshalJSONObject(dec *gojay.Decoder, k string) error {
	switch k {
	case "code":
		return dec.Int((*int)(&v.Code))
	case "message":
		return dec.String(&v.Message)
	}
	return nil
}

// NKeys returns the number of keys to unmarshal
func (v *ResponseError) NKeys() int { return 2 }

// MarshalJSONObject implements gojay's MarshalerJSONObject
func (v *ResponseError) MarshalJSONObject(enc *gojay.Encoder) {
	enc.IntKey("code", int(v.Code))
	enc.StringKey("message", v.Message)
}

// IsNil returns wether the structure is nil value or not
func (v *ResponseError) IsNil() bool { return v == nil }

// UnmarshalJSONObject implements gojay's UnmarshalerJSONObject
func (v *NotificationMessage) UnmarshalJSONObject(dec *gojay.Decoder, k string) error {
	switch k {
	case "jsonrpc":
		return dec.String(&v.JSONRPC)
	case "method":
		return dec.String(&v.Method)
	}
	return nil
}

// NKeys returns the number of keys to unmarshal
func (v *NotificationMessage) NKeys() int { return 2 }

// MarshalJSONObject implements gojay's MarshalerJSONObject
func (v *NotificationMessage) MarshalJSONObject(enc *gojay.Encoder) {
	enc.StringKey("jsonrpc", v.JSONRPC)
	enc.StringKey("method", v.Method)
}

// IsNil returns wether the structure is nil value or not
func (v *NotificationMessage) IsNil() bool { return v == nil }
